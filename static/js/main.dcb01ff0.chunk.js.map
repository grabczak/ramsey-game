{"version":3,"sources":["redux/reducers/graph.ts","redux/store.ts","constants/actions.ts","components/Node/Node.tsx","components/Graph/Graph.tsx","redux/actions/graph.ts","serviceWorker.ts","index.tsx","components/App/App.tsx"],"names":["initialState","createGraph","x","size","nodes","links","i","push","id","String","Math","random","cos","PI","y","sin","a","b","Number","source","target","color","rootReducer","combineReducers","graph","state","action","type","payload","filter","item","logger","createLogger","collapsed","store","createStore","applyMiddleware","Node","className","floor","Graph","useSelector","dispatch","useDispatch","config","node","renderLabel","viewGenerator","link","highlightColor","strokeWidth","staticGraph","width","height","length","value","onChange","e","min","max","data","onClickLink","addEdge","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcb01ff0.chunk.js","sourcesContent":["import { ADD_EDGE, CREATE_GRAPH } from '../../constants/actions';\nimport { AddEdge, CreateGraph } from '../actions/graph';\n\nexport type Node = {\n  id: string;\n  x: number;\n  y: number;\n};\n\nexport type Link = {\n  source: string;\n  target: string;\n  color: string;\n};\n\nexport type GraphState = {\n  nodes: Array<Node>;\n  links: Array<Link>;\n};\n\nexport type GraphAction = CreateGraph & AddEdge;\n\nconst initialState: GraphState = {\n  ...createGraph(7),\n};\n\nlet x = false;\n\nexport function graph(state = initialState, action: GraphAction): GraphState {\n  switch (action.type) {\n    case CREATE_GRAPH:\n      return {\n        ...state,\n        ...createGraph(action.payload.size),\n      };\n    case ADD_EDGE:\n      x = !x;\n      return {\n        ...state,\n        links: [\n          ...state.links.filter(\n            item =>\n              item.source !== action.payload.source ||\n              item.target !== action.payload.target,\n          ),\n          {\n            source: action.payload.source,\n            target: action.payload.target,\n            color: x ? 'green' : 'red',\n          },\n        ],\n      };\n    default:\n      return state;\n  }\n}\n\nfunction createGraph(size: number) {\n  const r = 200;\n\n  const nodes: Array<Node> = [];\n  const links: Array<Link> = [];\n\n  for (let i = 0; i < size; i++) {\n    nodes.push({\n      id: String(i + 1 + Math.random()),\n      x: r * Math.cos((-2 * Math.PI * i) / size + Math.PI / 2) + 250,\n      y: -r * Math.sin((-2 * Math.PI * i) / size + Math.PI / 2) + 250,\n    });\n  }\n\n  for (const a of nodes) {\n    for (const b of nodes) {\n      if (Number(a.id) >= Number(b.id)) {\n        continue;\n      }\n      links.push({\n        source: a.id,\n        target: b.id,\n        color: '#CCCCCC',\n      });\n    }\n  }\n\n  return {\n    nodes,\n    links,\n  };\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\n\nimport { graph } from './reducers/graph';\n\nconst rootReducer = combineReducers({ graph });\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(logger));\n","export const ADD_EDGE: string = 'ADD_EDGE';\nexport const CREATE_GRAPH: string = 'CREATE_GRAPH';\n","import React from 'react';\nimport './Node.css';\n\nexport type NodeProps = {\n  id: string;\n};\n\nexport function Node({ id }: NodeProps) {\n  return (\n    <div className=\"Node\">\n      <p>{Math.floor(Number(id))}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Graph.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Graph as ReactD3Graph } from 'react-d3-graph';\n\nimport { Node } from '../Node';\nimport { RootState } from '../../redux/store';\nimport { addEdge, createGraph } from '../../redux/actions/graph';\n\nexport function Graph() {\n  const graph = useSelector((state: RootState) => state.graph);\n  const dispatch = useDispatch();\n\n  const config = {\n    node: {\n      renderLabel: false,\n      viewGenerator: (node: any) => <Node id={node.id} />,\n    },\n    link: {\n      highlightColor: 'green',\n      strokeWidth: 2,\n    },\n    // linkHighlightBehavior: true,\n    staticGraph: true,\n    width: 500,\n    height: 500,\n  };\n\n  const onClickLink = function(source: string, target: string) {\n    dispatch(addEdge(source, target));\n  };\n\n  return (\n    <div className=\"Graph\">\n      <p>{graph.nodes.length}</p>\n      <input\n        type=\"range\"\n        value={graph.nodes.length}\n        onChange={e => dispatch(createGraph(Number(e.target.value)))}\n        min=\"5\"\n        max=\"15\"\n      />\n      <ReactD3Graph\n        id=\"graph\"\n        data={graph}\n        config={config}\n        onClickLink={onClickLink}\n      />\n    </div>\n  );\n}\n","import { ADD_EDGE, CREATE_GRAPH } from '../../constants/actions';\n\nexport type CreateGraph = {\n  type: typeof CREATE_GRAPH;\n  payload: {\n    size: number;\n  };\n};\n\nexport const createGraph = (size: number): CreateGraph => {\n  return {\n    type: CREATE_GRAPH,\n    payload: { size },\n  };\n};\n\nexport type AddEdge = {\n  type: typeof ADD_EDGE;\n  payload: {\n    source: string;\n    target: string;\n  };\n};\n\nexport const addEdge = (source: string, target: string): AddEdge => {\n  return {\n    type: ADD_EDGE,\n    payload: { source, target },\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from '../../redux/store';\nimport { Graph } from '../Graph';\n\nexport function App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Graph />\n      </div>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}