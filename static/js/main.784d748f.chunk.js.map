{"version":3,"sources":["serviceWorker.ts","redux/reducers/game.ts","redux/reducers/graph.ts","redux/reducers/options.ts","redux/store.ts","constants/actions.ts","components/Node/index.tsx","utils/wait.ts","redux/actions/game.ts","redux/actions/graph.ts","components/Graph/index.tsx","components/Form/index.tsx","redux/actions/options.ts","index.tsx","components/App/index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","isGameRunning","isComputerTurn","winner","createGraph","size","nodes","links","i","push","id","String","Math","random","x","cos","PI","y","sin","a","b","Number","source","target","color","graphSize","targetCliqueSize","rootReducer","combineReducers","game","state","action","type","payload","affiliation","graph","filter","item","map","link","options","min","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","Node","className","floor","wait","seconds","Promise","resolve","setTimeout","endGame","jsnx","require","addEdge","Graph","config","node","renderLabel","viewGenerator","strokeWidth","staticGraph","width","height","useSelector","dispatch","useDispatch","data","onClickLink","find","getState","playerGraph","addNodesFrom","addEdgesFrom","graphCliqueNumber","possibleEdges","findNewEdge","newPlayerGraph","computerEdges","some","newEdge","length","console","log","computerGraph","nextMove","Form","useEffect","loading","document","getElementById","interval","setInterval","innerHTML","clearInterval","value","onChange","e","disabled","max","onClick","style","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.784d748f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { START_GAME, END_GAME, ADD_EDGE } from '../../constants/actions';\nimport { TGameAction } from '../../typings/actions';\nimport { TGameState } from '../../typings/state';\n\nconst initialState = {\n  isGameRunning: false,\n  isComputerTurn: false,\n  winner: null,\n};\n\nexport const game = (state: TGameState = initialState, action: TGameAction) => {\n  switch (action.type) {\n    case START_GAME:\n      return {\n        ...state,\n        isGameRunning: true,\n        winner: null,\n      };\n    case END_GAME:\n      return {\n        ...state,\n        isGameRunning: action.payload.winner !== null,\n        isComputerTurn: false,\n        winner: action.payload.winner,\n      };\n    case ADD_EDGE:\n      return {\n        ...state,\n        isComputerTurn: action.payload.affiliation === 'player',\n      };\n    default:\n      return state;\n  }\n};\n","import { ADD_EDGE, SET_GRAPH_SIZE, END_GAME } from '../../constants/actions';\nimport { TGraphAction } from '../../typings/actions';\nimport { TGraphState } from '../../typings/state';\n\nconst initialState = {\n  ...createGraph(6),\n};\n\nexport function graph(state: TGraphState = initialState, action: TGraphAction) {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        ...createGraph(action.payload.size),\n      };\n    case ADD_EDGE:\n      return {\n        ...state,\n        links: [\n          ...state.links.filter(\n            (item) =>\n              item.source !== action.payload.source ||\n              item.target !== action.payload.target,\n          ),\n          {\n            source: action.payload.source,\n            target: action.payload.target,\n            color: action.payload.affiliation === 'player' ? 'green' : 'red',\n          },\n        ],\n      };\n    case END_GAME:\n      return {\n        ...state,\n        links:\n          action.payload.winner === null\n            ? state.links.map((link) => ({ ...link, color: '#CCCCCC' }))\n            : state.links,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction createGraph(size: number) {\n  const r = 200;\n\n  const nodes = [];\n  const links = [];\n\n  for (let i = 0; i < size; i++) {\n    nodes.push({\n      id: String(i + 1 + Math.random()),\n      x: r * Math.cos((-2 * Math.PI * i) / size + Math.PI / 2) + 250,\n      y: -r * Math.sin((-2 * Math.PI * i) / size + Math.PI / 2) + 250,\n    });\n  }\n\n  for (const a of nodes) {\n    for (const b of nodes) {\n      if (Number(a.id) < Number(b.id)) {\n        links.push({\n          source: a.id,\n          target: b.id,\n          color: '#CCCCCC',\n        });\n      }\n    }\n  }\n\n  return {\n    nodes,\n    links,\n  };\n}\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n} from '../../constants/actions';\nimport { TOptionsAction } from '../../typings/actions';\nimport { TOptionsState } from '../../typings/state';\n\nconst initialState = {\n  graphSize: 6,\n  targetCliqueSize: 3,\n};\n\nexport function options(\n  state: TOptionsState = initialState,\n  action: TOptionsAction,\n) {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        graphSize: action.payload.size,\n        targetCliqueSize: Math.min(state.targetCliqueSize, action.payload.size),\n      };\n    case SET_TARGET_CLIQUE_SIZE:\n      return {\n        ...state,\n        targetCliqueSize: action.payload.size,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport { game } from './reducers/game';\nimport { graph } from './reducers/graph';\nimport { options } from './reducers/options';\n\nconst rootReducer = combineReducers({ game, graph, options });\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nexport type TRootState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n","export const ADD_EDGE = 'ADD_EDGE';\nexport const CREATE_GRAPH = 'CREATE_GRAPH';\nexport const NEXT_MOVE = 'NEXT_MOVE';\n\nexport const SET_GRAPH_SIZE = 'SET_GRAPH_SIZE';\nexport const SET_TARGET_CLIQUE_SIZE = 'SET_TARGET_CLIQUE_SIZE';\n\nexport const START_GAME = 'START_GAME';\nexport const END_GAME = 'END_GAME';\n","import React from 'react';\nimport './styles.css';\n\nexport type TNodeProps = {\n  id: string;\n};\n\nexport const Node = ({ id }: TNodeProps) => {\n  return (\n    <div className=\"node\">\n      <p>{Math.floor(Number(id))}</p>\n    </div>\n  );\n};\n","export const wait = (seconds: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n","import { START_GAME, END_GAME } from '../../constants/actions';\n\nexport const startGame = () => {\n  return {\n    type: START_GAME,\n  };\n};\n\nexport const endGame = (\n  winner: 'player' | 'computer' | 'draw' | null = null,\n) => {\n  return {\n    type: END_GAME,\n    payload: { winner },\n  };\n};\n","import { ADD_EDGE, CREATE_GRAPH } from '../../constants/actions';\nimport { wait } from '../../utils/wait';\nimport { TRootState, TNode, TLink } from '../../typings/state';\nimport { endGame } from './game';\n\nconst jsnx = require('jsnetworkx');\n\nexport const createGraph = (size: number) => {\n  return {\n    type: CREATE_GRAPH,\n    payload: { size },\n  };\n};\n\nexport const addEdge = (\n  source: string,\n  target: string,\n  affiliation: 'player' | 'computer',\n) => {\n  return {\n    type: ADD_EDGE,\n    payload: { source, target, affiliation },\n  };\n};\n\nexport const nextMove = (source: string, target: string) => {\n  return async (dispatch: any, getState: () => TRootState) => {\n    dispatch(addEdge(source, target, 'player'));\n\n    const playerGraph = new jsnx.Graph();\n\n    playerGraph.addNodesFrom(\n      getState().graph.nodes.map((node: TNode) => Math.floor(Number(node.id))),\n    );\n\n    playerGraph.addEdgesFrom(\n      getState()\n        .graph.links.filter((link: TLink) => link.color === 'green')\n        .map((link: TLink) => [\n          Math.floor(Number(link.source)),\n          Math.floor(Number(link.target)),\n        ]),\n    );\n\n    if (\n      jsnx.graphCliqueNumber(playerGraph) ===\n      getState().options.targetCliqueSize\n    ) {\n      dispatch(endGame('player'));\n      return;\n    }\n\n    const possibleEdges = getState().graph.links.filter(\n      (link: TLink) => link.color === '#CCCCCC',\n    );\n\n    // This code needs some serious refactor\n    const findNewEdge = (): any => {\n      return new Promise((resolve) => {\n        const nodes = playerGraph.nodes();\n\n        for (const a of nodes) {\n          for (const b of nodes) {\n            if (a >= b) {\n              continue;\n            }\n\n            const newPlayerGraph = new jsnx.Graph();\n\n            newPlayerGraph.addNodesFrom(\n              getState().graph.nodes.map((node: TNode) =>\n                Math.floor(Number(node.id)),\n              ),\n            );\n\n            newPlayerGraph.addEdgesFrom(\n              getState()\n                .graph.links.filter((link: TLink) => link.color === 'green')\n                .map((link: TLink) => [\n                  Math.floor(Number(link.source)),\n                  Math.floor(Number(link.target)),\n                ]),\n            );\n\n            newPlayerGraph.addEdge(a, b);\n\n            const computerEdges = getState().graph.links.filter(\n              (link: TLink) => link.color === 'red',\n            );\n\n            if (\n              jsnx.graphCliqueNumber(newPlayerGraph) ===\n                getState().options.targetCliqueSize &&\n              !computerEdges.some(\n                (link: TLink) =>\n                  Math.floor(Number(link.source)) === a &&\n                  Math.floor(Number(link.target)) === b,\n              )\n            ) {\n              const newEdge = {\n                source: getState().graph.nodes.find(\n                  (node: TNode) => Math.floor(Number(node.id)) === a,\n                )?.id,\n                target: getState().graph.nodes.find(\n                  (node: TNode) => Math.floor(Number(node.id)) === b,\n                )?.id,\n              };\n\n              resolve(newEdge);\n            }\n          }\n        }\n        resolve(\n          possibleEdges[Math.floor(Math.random() * possibleEdges.length)],\n        );\n      });\n    };\n\n    const newEdge = await findNewEdge();\n\n    console.log(newEdge);\n\n    if (newEdge) {\n      await wait(2);\n      dispatch(addEdge(newEdge.source, newEdge.target, 'computer'));\n    } else {\n      dispatch(endGame('draw'));\n      return;\n    }\n\n    const computerGraph = new jsnx.Graph();\n\n    computerGraph.addNodesFrom(\n      getState().graph.nodes.map((node: TNode) => Math.floor(Number(node.id))),\n    );\n\n    computerGraph.addEdgesFrom(\n      getState()\n        .graph.links.filter((link: TLink) => link.color === 'red')\n        .map((link: TLink) => [\n          Math.floor(Number(link.source)),\n          Math.floor(Number(link.target)),\n        ]),\n    );\n\n    if (\n      jsnx.graphCliqueNumber(computerGraph) ===\n      getState().options.targetCliqueSize\n    ) {\n      dispatch(endGame('computer'));\n      return;\n    }\n\n    const remainingEdges = getState().graph.links.filter(\n      (link: TLink) => link.color === '#CCCCCC',\n    );\n\n    if (remainingEdges.length === 0) {\n      dispatch(endGame('draw'));\n    }\n  };\n};\n","import React from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Graph as ReactD3Graph } from 'react-d3-graph';\n\nimport { Node } from '../Node';\nimport { TRootState, TLink } from '../../typings/state';\nimport { nextMove } from '../../redux/actions/graph';\n\nexport const Graph = () => {\n  const config = {\n    node: {\n      renderLabel: false,\n      viewGenerator: (node: any) => <Node id={node.id} />,\n    },\n    link: {\n      strokeWidth: 3,\n    },\n    staticGraph: true,\n    width: 500,\n    height: 500,\n  };\n\n  const graph = useSelector((state: TRootState) => state.graph);\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const isComputerTurn = useSelector(\n    (state: TRootState) => state.game.isComputerTurn,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  const onClickLink = (source: string, target: string) => {\n    if (isComputerTurn || winner) {\n      return;\n    }\n\n    const link = graph.links.find(\n      (link: TLink) => link.source === source && link.target === target,\n    );\n\n    if (link?.color === '#CCCCCC') {\n      dispatch(nextMove(source, target));\n    }\n  };\n\n  return (\n    <div className=\"graph\">\n      <ReactD3Graph\n        id=\"graph\"\n        data={graph}\n        config={config}\n        onClickLink={onClickLink}\n        y\n      />\n      {!isGameRunning && <div className=\"overlay\" />}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TRootState } from '../../typings/state';\nimport { setGraphSize, setTargetCliqueSize } from '../../redux/actions/options';\nimport { startGame, endGame } from '../../redux/actions/game';\n\nexport const Form = () => {\n  const graphSize = useSelector((state: TRootState) => state.options.graphSize);\n\n  const targetCliqueSize = useSelector(\n    (state: TRootState) => state.options.targetCliqueSize,\n  );\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const isComputerTurn = useSelector(\n    (state: TRootState) => state.game.isComputerTurn,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loading = document.getElementById('loading');\n\n    const interval = setInterval(() => {\n      if (loading) {\n        if (loading.innerHTML.length <= 2) {\n          loading.innerHTML += '.';\n        } else {\n          loading.innerHTML = '';\n        }\n      }\n    }, 500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isComputerTurn]);\n\n  const handleGraphSizeChange = (e: any) => {\n    dispatch(setGraphSize(Number(e.target.value)));\n  };\n\n  const handleTargetCliqueSizeChange = (e: any) => {\n    dispatch(setTargetCliqueSize(Number(e.target.value)));\n  };\n\n  const handleGameStart = () => {\n    dispatch(startGame());\n  };\n\n  const handleGameEnd = () => {\n    dispatch(endGame());\n  };\n\n  return (\n    <div className=\"form\">\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar grafu:</p>\n        <p className=\"value\">{graphSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={graphSize}\n          onChange={handleGraphSizeChange}\n          disabled={isGameRunning}\n          min={4}\n          max={10}\n        />\n      </div>\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar szukanej kliki:</p>\n        <p className=\"value\">{targetCliqueSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={targetCliqueSize}\n          onChange={handleTargetCliqueSizeChange}\n          disabled={isGameRunning}\n          min={3}\n          max={graphSize}\n        />\n      </div>\n      <div className=\"buttonsContainer\">\n        <button\n          className=\"button\"\n          onClick={handleGameStart}\n          disabled={isGameRunning}\n        >\n          Rozpocznij grę\n        </button>\n        <button\n          className=\"button\"\n          onClick={handleGameEnd}\n          disabled={!isGameRunning}\n        >\n          Zakończ grę\n        </button>\n      </div>\n      {winner ? (\n        <p\n          className=\"loading\"\n          style={{\n            color:\n              winner === 'player'\n                ? 'green'\n                : winner === 'computer'\n                ? 'red'\n                : 'blue',\n          }}\n        >\n          {winner === 'player'\n            ? 'Człowiek wygrywa'\n            : winner === 'computer'\n            ? 'Komputer wygrywa'\n            : 'Remis'}\n        </p>\n      ) : isGameRunning ? (\n        <p className=\"loading\">\n          {isComputerTurn ? 'Komputer myśli' : 'Twoja kolej'}\n          {isComputerTurn && <span id=\"loading\" />}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n} from '../../constants/actions';\n\nexport const setGraphSize = (size: number) => {\n  return {\n    type: SET_GRAPH_SIZE,\n    payload: { size },\n  };\n};\n\nexport const setTargetCliqueSize = (size: number) => {\n  return {\n    type: SET_TARGET_CLIQUE_SIZE,\n    payload: { size },\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from '../../redux/store';\nimport { Graph } from '../Graph';\nimport { Form } from '../Form';\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <h1>Gra Ramseya</h1>\n        <Form />\n        <Graph />\n      </div>\n    </Provider>\n  );\n};\n"],"sourceRoot":""}