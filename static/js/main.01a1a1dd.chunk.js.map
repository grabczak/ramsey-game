{"version":3,"sources":["serviceWorker.ts","redux/reducers/game.ts","redux/store.ts","constants/actions.ts","components/Node/index.tsx","utils/wait.ts","redux/actions/game.ts","components/Graph/index.tsx","components/Form/index.tsx","index.tsx","components/App/index.tsx"],"names":["Boolean","window","location","hostname","match","createGraph","size","nodes","edges","i","push","id","j","source","target","team","initialState","targetCliqueSize","isGameRunning","whoIsMoving","winner","rootReducer","combineReducers","game","state","action","type","payload","Math","min","length","map","edge","filter","item","store","createStore","applyMiddleware","thunk","Node","className","wait","seconds","Promise","resolve","setTimeout","jsnx","require","endGame","nextMove","Graph","useSelector","dispatch","useDispatch","jsnxNodes","useMemo","node","String","random","x","cos","PI","y","sin","jsnxEdges","find","floor","Number","color","graph","links","data","config","viewGenerator","renderLabel","link","strokeWidth","staticGraph","width","height","onClickLink","numberSource","numberTarget","getState","a","jsnxPlayerEdges","jsnxComputerEdges","availableEdges","playerGraph","addNodesFrom","addEdgesFrom","computerGraph","graphCliqueNumber","isAvailable","some","newEdge","b","newComputerGraph","addEdge","winningEdge","newPlayerGraph","jsnxPDegrees","degree","playerDegrees","Array","from","sort","jsnxCDegrees","computerDegrees","v1","v2","availableEdgesWithPlayerVertex","computerDegree","playerDegree","maxDegree","maxSum","sourceDegree","targetDegree","sum","findNewEdge","playerMove","Form","graphSize","useEffect","loading","document","getElementById","interval","setInterval","innerHTML","clearInterval","value","onChange","e","disabled","max","onClick","style","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01a1a1dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n  START_GAME,\n  END_GAME,\n  NEXT_MOVE,\n} from '../../constants/actions';\nimport { TGameAction } from '../../typings/actions';\nimport { TGameState } from '../../typings/state';\n\nconst createGraph = (size: number) => {\n  const nodes = [];\n  const edges = [];\n\n  for (let i = 0; i < size; i++) {\n    nodes.push({ id: i });\n  }\n\n  for (let i = 0; i < size; i++) {\n    for (let j = i + 1; j < size; j++) {\n      edges.push({\n        source: nodes[i].id,\n        target: nodes[j].id,\n        team: null,\n      });\n    }\n  }\n\n  return {\n    nodes,\n    edges,\n  };\n};\n\nconst initialState = {\n  ...createGraph(6),\n  targetCliqueSize: 3,\n  isGameRunning: false,\n  whoIsMoving: 'player' as const,\n  winner: null,\n};\n\nexport const game = (state: TGameState = initialState, action: TGameAction) => {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        ...createGraph(action.payload.size),\n        targetCliqueSize: Math.min(state.targetCliqueSize, action.payload.size),\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case SET_TARGET_CLIQUE_SIZE:\n      return {\n        ...state,\n        ...createGraph(state.nodes.length),\n        targetCliqueSize: action.payload.size,\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        edges: state.edges.map((edge) => ({\n          ...edge,\n          team: null,\n        })),\n        isGameRunning: true,\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case END_GAME:\n      return {\n        ...state,\n        edges: action.payload.winner\n          ? state.edges\n          : state.edges.map((edge) => ({\n              ...edge,\n              team: null,\n            })),\n        isGameRunning: false,\n        winner: action.payload.winner,\n      };\n    case NEXT_MOVE:\n      return {\n        ...state,\n        edges: [\n          ...state.edges.filter(\n            (item) =>\n              item.source !== action.payload.edge.source ||\n              item.target !== action.payload.edge.target,\n          ),\n          action.payload.edge,\n        ],\n        whoIsMoving:\n          action.payload.edge.team === 'player' ? 'computer' : 'player',\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n// import { createLogger } from 'redux-logger';\n\nimport { game } from './reducers/game';\n\nconst rootReducer = combineReducers({ game });\n\n// const logger = createLogger({\n// collapsed: true,\n// });\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","export const SET_GRAPH_SIZE = 'SET_GRAPH_SIZE';\nexport const SET_TARGET_CLIQUE_SIZE = 'SET_TARGET_CLIQUE_SIZE';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME = 'END_GAME';\nexport const NEXT_MOVE = 'NEXT_MOVE';\n","import React from 'react';\nimport './styles.css';\n\nexport type TNodeProps = {\n  id: number;\n};\n\nexport const Node = ({ id }: TNodeProps) => {\n  return (\n    <div className=\"node\">\n      <p>{id + 1}</p>\n    </div>\n  );\n};\n","export const wait = (seconds: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n  START_GAME,\n  END_GAME,\n  NEXT_MOVE,\n} from '../../constants/actions';\nimport { TNode, TEdge } from '../../typings/state';\nimport { TThunkResult } from '../../typings/actions';\nimport { wait } from '../../utils/wait';\n\nconst jsnx = require('jsnetworkx');\n\nexport const setGraphSize = (size: number) => {\n  return {\n    type: SET_GRAPH_SIZE,\n    payload: { size },\n  };\n};\n\nexport const setTargetCliqueSize = (size: number) => {\n  return {\n    type: SET_TARGET_CLIQUE_SIZE,\n    payload: { size },\n  };\n};\n\nexport const startGame = () => {\n  return {\n    type: START_GAME,\n  };\n};\n\nexport const endGame = (\n  winner: 'player' | 'computer' | 'draw' | null = null,\n) => {\n  return {\n    type: END_GAME,\n    payload: { winner },\n  };\n};\n\nexport const nextMove = (edge: TEdge) => {\n  return {\n    type: NEXT_MOVE,\n    payload: { edge },\n  };\n};\n\nexport const playerMove = (\n  source: number,\n  target: number,\n): TThunkResult<Promise<void>> => {\n  return async (dispatch, getState) => {\n    const { targetCliqueSize } = getState().game;\n\n    dispatch(nextMove({ source, target, team: 'player' }));\n\n    const jsnxNodes = getState().game.nodes.map((node: TNode) => node.id);\n\n    const jsnxPlayerEdges = getState()\n      .game.edges.filter((edge: TEdge) => edge.team === 'player')\n      .map((edge: TEdge) => [edge.source, edge.target]);\n\n    const jsnxComputerEdges = getState()\n      .game.edges.filter((edge: TEdge) => edge.team === 'computer')\n      .map((edge: TEdge) => [edge.source, edge.target]);\n\n    const availableEdges = getState().game.edges.filter(\n      (edge: TEdge) => edge.team === null,\n    );\n\n    const playerGraph = new jsnx.Graph();\n    playerGraph.addNodesFrom(jsnxNodes);\n    playerGraph.addEdgesFrom(jsnxPlayerEdges);\n\n    const computerGraph = new jsnx.Graph();\n    computerGraph.addNodesFrom(jsnxNodes);\n    computerGraph.addEdgesFrom(jsnxComputerEdges);\n\n    if (jsnx.graphCliqueNumber(playerGraph) === targetCliqueSize) {\n      dispatch(endGame('player'));\n      return;\n    }\n\n    const isAvailable = (source: number, target: number) => {\n      if (source >= target) {\n        return false;\n      }\n\n      return availableEdges.some(\n        (edge: TEdge) => edge.source === source && edge.target === target,\n      );\n    };\n\n    const findNewEdge = () => {\n      for (const a of jsnxNodes) {\n        for (const b of jsnxNodes) {\n          const newComputerGraph = new jsnx.Graph();\n          newComputerGraph.addNodesFrom(jsnxNodes);\n          newComputerGraph.addEdgesFrom(jsnxComputerEdges);\n          newComputerGraph.addEdge(a, b);\n\n          if (\n            isAvailable(a, b) &&\n            jsnx.graphCliqueNumber(newComputerGraph) === targetCliqueSize\n          ) {\n            return {\n              source: a,\n              target: b,\n              winningEdge: true,\n            };\n          }\n        }\n      }\n\n      for (const a of jsnxNodes) {\n        for (const b of jsnxNodes) {\n          const newPlayerGraph = new jsnx.Graph();\n          newPlayerGraph.addNodesFrom(jsnxNodes);\n          newPlayerGraph.addEdgesFrom(jsnxPlayerEdges);\n          newPlayerGraph.addEdge(a, b);\n\n          if (\n            isAvailable(a, b) &&\n            jsnx.graphCliqueNumber(newPlayerGraph) === targetCliqueSize\n          ) {\n            return {\n              source: a,\n              target: b,\n              winningEdge: false,\n            };\n          }\n        }\n      }\n\n      const jsnxPDegrees: Map<number, number> = jsnx.degree(playerGraph);\n\n      const playerDegrees: number[][] = Array.from(jsnxPDegrees).sort(\n        (a: number[], b: number[]) => a[1] - b[1],\n      );\n\n      const jsnxCDegrees: Map<number, number> = jsnx.degree(computerGraph);\n\n      const computerDegrees: number[][] = Array.from(jsnxCDegrees).sort(\n        (a: number[], b: number[]) => b[1] - a[1],\n      );\n\n      if (targetCliqueSize === 3) {\n        if (jsnxComputerEdges.length === 0) {\n          const [v1, v2] = jsnxPlayerEdges[0];\n\n          const availableEdgesWithPlayerVertex = availableEdges.filter(\n            (edge: TEdge) =>\n              edge.source === v1 ||\n              edge.source === v2 ||\n              edge.target === v1 ||\n              edge.target === v2,\n          );\n\n          const edge =\n            availableEdgesWithPlayerVertex[\n              Math.floor(Math.random() * availableEdgesWithPlayerVertex.length)\n            ];\n\n          return {\n            ...edge,\n            winningEdge: false,\n          };\n        }\n\n        for (const computerDegree of computerDegrees) {\n          for (const playerDegree of playerDegrees) {\n            const [v1, v2] = [computerDegree[0], playerDegree[0]].sort();\n\n            if (isAvailable(v1, v2)) {\n              return {\n                source: v1,\n                target: v2,\n                winningEdge: false,\n              };\n            }\n          }\n        }\n      }\n\n      if (targetCliqueSize === 4) {\n        if (jsnxComputerEdges.length === 0) {\n          return {\n            ...availableEdges[\n              Math.floor(Math.random() * availableEdges.length)\n            ],\n            winningEdge: false,\n          };\n        }\n\n        if (computerDegrees[0][1] < 4) {\n          for (const computerDegree of computerDegrees) {\n            for (const playerDegree of playerDegrees) {\n              const [v1, v2] = [computerDegree[0], playerDegree[0]].sort();\n\n              if (isAvailable(v1, v2)) {\n                return {\n                  source: v1,\n                  target: v2,\n                  winningEdge: false,\n                };\n              }\n            }\n          }\n        }\n\n        if (jsnxComputerEdges.length === 4) {\n          for (const a of playerDegrees) {\n            for (const b of playerDegrees) {\n              const newComputerGraph = new jsnx.Graph();\n              newComputerGraph.addNodesFrom(jsnxNodes);\n              newComputerGraph.addEdgesFrom(jsnxComputerEdges);\n              newComputerGraph.addEdge(a[0], b[0]);\n\n              if (\n                isAvailable(a[0], b[0]) &&\n                jsnx.graphCliqueNumber(newComputerGraph) === 3\n              ) {\n                return {\n                  source: a[0],\n                  target: b[0],\n                  winningEdge: false,\n                };\n              }\n            }\n          }\n        }\n\n        const maxDegree = computerDegrees[0][1];\n\n        let maxSum = 0;\n        let v1 = null;\n        let v2 = null;\n\n        for (const a of computerDegrees) {\n          for (const b of computerDegrees) {\n            const sourceDegree = a[1];\n            const targetDegree = b[1];\n\n            if (sourceDegree === maxDegree || targetDegree === maxDegree) {\n              continue;\n            }\n\n            const sum = a[1] + b[1];\n\n            const source = a[0];\n            const target = b[0];\n\n            if (sum >= maxSum && isAvailable(source, target)) {\n              maxSum = sum;\n              v1 = source;\n              v2 = target;\n            }\n          }\n        }\n\n        if (v1 !== null && v2 !== null) {\n          return {\n            source: v1,\n            target: v2,\n            winningEdge: false,\n          };\n        }\n      }\n\n      return {\n        ...availableEdges[Math.floor(Math.random() * availableEdges.length)],\n        winningEdge: false,\n      };\n    };\n\n    const newEdge = findNewEdge();\n\n    if (newEdge.winningEdge || newEdge.source || newEdge.target) {\n      await wait(2);\n\n      if (!getState().game.isGameRunning) {\n        return;\n      }\n\n      dispatch(\n        nextMove({\n          source: newEdge.source,\n          target: newEdge.target,\n          team: 'computer',\n        }),\n      );\n\n      if (newEdge.winningEdge) {\n        dispatch(endGame('computer'));\n        return;\n      }\n    } else {\n      dispatch(endGame('draw'));\n      return;\n    }\n\n    const remainingEdges = getState().game.edges.filter(\n      (edge: TEdge) => edge.team === null,\n    );\n\n    if (remainingEdges.length === 0) {\n      dispatch(endGame('draw'));\n    }\n  };\n};\n","import React, { useMemo } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Graph as ReactD3Graph } from 'react-d3-graph';\n\nimport { Node } from '../Node';\nimport { TRootState, TNode, TEdge } from '../../typings/state';\nimport { playerMove } from '../../redux/actions/game';\n\nexport const Graph = () => {\n  const nodes = useSelector((state: TRootState) => state.game.nodes);\n\n  const edges = useSelector((state: TRootState) => state.game.edges);\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const whoIsMoving = useSelector(\n    (state: TRootState) => state.game.whoIsMoving,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  const onClickLink = (source: string, target: string) => {\n    const numberSource = Math.floor(Number(source));\n    const numberTarget = Math.floor(Number(target));\n\n    if (whoIsMoving === 'computer' || winner) {\n      return;\n    }\n\n    const edge = edges.find(\n      (edge: TEdge) =>\n        edge.source === numberSource && edge.target === numberTarget,\n    );\n\n    if (!edge?.team) {\n      dispatch(playerMove(numberSource, numberTarget));\n    }\n  };\n\n  const jsnxNodes = useMemo(() => {\n    return nodes.map((node: TNode) => {\n      const { length } = nodes;\n      const { id } = node;\n\n      return {\n        id: String(id + Math.random()),\n        x: 200 * Math.cos((-2 * Math.PI * id) / length + Math.PI / 2) + 250,\n        y: -200 * Math.sin((-2 * Math.PI * id) / length + Math.PI / 2) + 250,\n      };\n    });\n  }, [nodes]);\n\n  const jsnxEdges = useMemo(() => {\n    return edges.map((edge: TEdge) => {\n      return {\n        source: jsnxNodes.find(\n          ({ id }) => Math.floor(Number(id)) === edge.source,\n        )?.id,\n        target: jsnxNodes.find(\n          ({ id }) => Math.floor(Number(id)) === edge.target,\n        )?.id,\n        color:\n          edge.team === 'player'\n            ? 'green'\n            : edge.team === 'computer'\n            ? 'red'\n            : 'gray',\n      };\n    });\n  }, [jsnxNodes, edges]);\n\n  const graph = {\n    nodes: jsnxNodes,\n    links: jsnxEdges,\n  };\n\n  return (\n    <div className=\"graph\">\n      <ReactD3Graph\n        id=\"graph\"\n        data={graph}\n        config={{\n          node: {\n            viewGenerator: ({ id }: any) => (\n              <Node id={Math.floor(Number(id))} />\n            ),\n            renderLabel: false,\n          },\n          link: {\n            strokeWidth: 3,\n          },\n          staticGraph: true,\n          width: 500,\n          height: 500,\n        }}\n        onClickLink={onClickLink}\n      />\n      {!isGameRunning && <div className=\"overlay\" />}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TRootState } from '../../typings/state';\nimport { setGraphSize, setTargetCliqueSize } from '../../redux/actions/game';\nimport { startGame, endGame } from '../../redux/actions/game';\n\nexport const Form = () => {\n  const graphSize = useSelector((state: TRootState) => state.game.nodes.length);\n\n  const targetCliqueSize = useSelector(\n    (state: TRootState) => state.game.targetCliqueSize,\n  );\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const whoIsMoving = useSelector(\n    (state: TRootState) => state.game.whoIsMoving,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loading = document.getElementById('loading');\n\n    const interval = setInterval(() => {\n      if (loading) {\n        if (loading.innerHTML.length <= 2) {\n          loading.innerHTML += '.';\n        } else {\n          loading.innerHTML = '';\n        }\n      }\n    }, 500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [whoIsMoving]);\n\n  const handleGraphSizeChange = (e: any) => {\n    dispatch(setGraphSize(Number(e.target.value)));\n  };\n\n  const handleTargetCliqueSizeChange = (e: any) => {\n    dispatch(setTargetCliqueSize(Number(e.target.value)));\n  };\n\n  const handleGameStart = () => {\n    dispatch(startGame());\n  };\n\n  const handleGameEnd = () => {\n    dispatch(endGame());\n  };\n\n  return (\n    <div className=\"form\">\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar grafu:</p>\n        <p className=\"value\">{graphSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={graphSize}\n          onChange={handleGraphSizeChange}\n          disabled={isGameRunning}\n          min={4}\n          max={10}\n        />\n      </div>\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar szukanej kliki:</p>\n        <p className=\"value\">{targetCliqueSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={targetCliqueSize}\n          onChange={handleTargetCliqueSizeChange}\n          disabled={isGameRunning}\n          min={3}\n          max={graphSize}\n        />\n      </div>\n      <div className=\"buttonsContainer\">\n        <button\n          className=\"button\"\n          onClick={handleGameStart}\n          disabled={isGameRunning}\n        >\n          Rozpocznij grę\n        </button>\n        <button\n          className=\"button\"\n          onClick={handleGameEnd}\n          disabled={!isGameRunning}\n        >\n          Zakończ grę\n        </button>\n      </div>\n      {winner ? (\n        <p\n          className=\"loading\"\n          style={{\n            color:\n              winner === 'player'\n                ? 'green'\n                : winner === 'computer'\n                ? 'red'\n                : 'blue',\n          }}\n        >\n          {winner === 'player'\n            ? 'Człowiek wygrywa'\n            : winner === 'computer'\n            ? 'Komputer wygrywa'\n            : 'Remis'}\n        </p>\n      ) : isGameRunning ? (\n        <p className=\"loading\">\n          {whoIsMoving === 'computer' ? 'Komputer myśli' : 'Twoja kolej'}\n          {whoIsMoving === 'computer' && <span id=\"loading\" />}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from '../../redux/store';\nimport { Graph } from '../Graph';\nimport { Form } from '../Form';\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <h1>Gra Ramseya</h1>\n        <Form />\n        <Graph />\n      </div>\n    </Provider>\n  );\n};\n"],"sourceRoot":""}