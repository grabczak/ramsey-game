{"version":3,"sources":["serviceWorker.ts","redux/reducers/game.ts","redux/store.ts","constants/actions.ts","components/Node/index.tsx","utils/wait.ts","redux/actions/game.ts","components/Graph/index.tsx","components/Form/index.tsx","index.tsx","components/App/index.tsx"],"names":["Boolean","window","location","hostname","match","createGraph","size","nodes","edges","i","push","id","j","source","target","team","initialState","targetCliqueSize","isGameRunning","whoIsMoving","winner","rootReducer","combineReducers","game","state","action","type","payload","Math","min","length","map","edge","filter","item","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","Node","className","wait","seconds","Promise","resolve","setTimeout","jsnx","require","endGame","nextMove","Graph","useSelector","dispatch","useDispatch","jsnxNodes","useMemo","node","String","random","x","cos","PI","y","sin","jsnxEdges","find","floor","Number","color","graph","links","data","config","viewGenerator","renderLabel","link","strokeWidth","staticGraph","width","height","onClickLink","numberSource","numberTarget","getState","a","graphSize","jsnxPlayerEdges","jsnxComputerEdges","possibleEdges","playerGraph","addNodesFrom","addEdgesFrom","graphCliqueNumber","computerGraph","findNewEdge","v1","v2","v1Edges","winningEdge","b","newComputerGraph","addEdge","some","newPlayerGraph","playerDegrees","Array","from","degree","sort","computerDegrees","computerDegree","playerDegree","newEdge","playerMove","Form","useEffect","loading","document","getElementById","interval","setInterval","innerHTML","clearInterval","value","onChange","e","disabled","max","onClick","style","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.402ef174.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n  START_GAME,\n  END_GAME,\n  NEXT_MOVE,\n} from '../../constants/actions';\nimport { TGameAction } from '../../typings/actions';\nimport { TGameState } from '../../typings/state';\n\nconst createGraph = (size: number) => {\n  const nodes = [];\n  const edges = [];\n\n  for (let i = 0; i < size; i++) {\n    nodes.push({ id: i });\n  }\n\n  for (let i = 0; i < size; i++) {\n    for (let j = i + 1; j < size; j++) {\n      edges.push({\n        source: nodes[i].id,\n        target: nodes[j].id,\n        team: null,\n      });\n    }\n  }\n\n  return {\n    nodes,\n    edges,\n  };\n};\n\nconst initialState = {\n  ...createGraph(6),\n  targetCliqueSize: 3,\n  isGameRunning: false,\n  whoIsMoving: 'player' as const,\n  winner: null,\n};\n\nexport const game = (state: TGameState = initialState, action: TGameAction) => {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        ...createGraph(action.payload.size),\n        targetCliqueSize: Math.min(state.targetCliqueSize, action.payload.size),\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case SET_TARGET_CLIQUE_SIZE:\n      return {\n        ...state,\n        ...createGraph(state.nodes.length),\n        targetCliqueSize: action.payload.size,\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        edges: state.edges.map((edge) => ({\n          ...edge,\n          team: null,\n        })),\n        isGameRunning: true,\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case END_GAME:\n      return {\n        ...state,\n        edges: action.payload.winner\n          ? state.edges\n          : state.edges.map((edge) => ({\n              ...edge,\n              team: null,\n            })),\n        isGameRunning: false,\n        winner: action.payload.winner,\n      };\n    case NEXT_MOVE:\n      return {\n        ...state,\n        edges: [\n          ...state.edges.filter(\n            (item) =>\n              item.source !== action.payload.edge.source ||\n              item.target !== action.payload.edge.target,\n          ),\n          action.payload.edge,\n        ],\n        whoIsMoving:\n          action.payload.edge.team === 'player' ? 'computer' : 'player',\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport { game } from './reducers/game';\n\nconst rootReducer = combineReducers({ game });\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n","export const SET_GRAPH_SIZE = 'SET_GRAPH_SIZE';\nexport const SET_TARGET_CLIQUE_SIZE = 'SET_TARGET_CLIQUE_SIZE';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME = 'END_GAME';\nexport const NEXT_MOVE = 'NEXT_MOVE';\n","import React from 'react';\nimport './styles.css';\n\nexport type TNodeProps = {\n  id: number;\n};\n\nexport const Node = ({ id }: TNodeProps) => {\n  return (\n    <div className=\"node\">\n      <p>{id}</p>\n    </div>\n  );\n};\n","export const wait = (seconds: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n  START_GAME,\n  END_GAME,\n  NEXT_MOVE,\n} from '../../constants/actions';\nimport { TNode, TEdge, TRootState } from '../../typings/state';\nimport { wait } from '../../utils/wait';\n\nconst jsnx = require('jsnetworkx');\n\nexport const setGraphSize = (size: number) => {\n  return {\n    type: SET_GRAPH_SIZE,\n    payload: { size },\n  };\n};\n\nexport const setTargetCliqueSize = (size: number) => {\n  return {\n    type: SET_TARGET_CLIQUE_SIZE,\n    payload: { size },\n  };\n};\n\nexport const startGame = () => {\n  return {\n    type: START_GAME,\n  };\n};\n\nexport const endGame = (\n  winner: 'player' | 'computer' | 'draw' | null = null,\n) => {\n  return {\n    type: END_GAME,\n    payload: { winner },\n  };\n};\n\nexport const nextMove = (edge: TEdge) => {\n  return {\n    type: NEXT_MOVE,\n    payload: { edge },\n  };\n};\n\nexport const playerMove = (source: number, target: number) => {\n  return async (dispatch: any, getState: () => TRootState) => {\n    const graphSize = getState().game.nodes.length;\n    const { targetCliqueSize } = getState().game;\n\n    dispatch(nextMove({ source, target, team: 'player' }));\n\n    const jsnxNodes = getState().game.nodes.map((node: TNode) => node.id);\n    const jsnxPlayerEdges = getState()\n      .game.edges.filter((edge: TEdge) => edge.team === 'player')\n      .map((edge: TEdge) => [edge.source, edge.target]);\n    const jsnxComputerEdges = getState()\n      .game.edges.filter((edge: TEdge) => edge.team === 'computer')\n      .map((edge: TEdge) => [edge.source, edge.target]);\n\n    const possibleEdges = getState().game.edges.filter(\n      (edge: TEdge) => edge.team === null,\n    );\n\n    const playerGraph = new jsnx.Graph();\n    playerGraph.addNodesFrom(jsnxNodes);\n    playerGraph.addEdgesFrom(jsnxPlayerEdges);\n\n    if (jsnx.graphCliqueNumber(playerGraph) === targetCliqueSize) {\n      dispatch(endGame('player'));\n      return;\n    }\n\n    const computerGraph = new jsnx.Graph();\n    computerGraph.addNodesFrom(jsnxNodes);\n    computerGraph.addEdgesFrom(jsnxComputerEdges);\n\n    const findNewEdge = async (): Promise<TEdge & { winningEdge: boolean }> => {\n      if (jsnxPlayerEdges.length === 1) {\n        const [v1, v2] = jsnxPlayerEdges[0];\n\n        const v1Edges = [];\n        for (let i = 0; i < graphSize; i++) {\n          if (i !== v1 && i !== v2) {\n            v1Edges.push([v1, i]);\n          }\n        }\n\n        const edge = v1Edges[Math.floor(Math.random() * v1Edges.length)];\n\n        return {\n          source: edge[0],\n          target: edge[1],\n          team: 'computer',\n          winningEdge: false,\n        };\n      }\n\n      for (const a of jsnxNodes) {\n        for (const b of jsnxNodes) {\n          if (a >= b) {\n            continue;\n          }\n\n          const newComputerGraph = new jsnx.Graph();\n          newComputerGraph.addNodesFrom(jsnxNodes);\n          newComputerGraph.addEdgesFrom(jsnxComputerEdges);\n          newComputerGraph.addEdge(a, b);\n\n          if (\n            possibleEdges.some(\n              (edge: TEdge) => edge.source === a && edge.target === b,\n            ) &&\n            jsnx.graphCliqueNumber(newComputerGraph) === targetCliqueSize\n          ) {\n            const newEdge = {\n              source: a,\n              target: b,\n              team: 'computer' as const,\n              winningEdge: true,\n            };\n\n            return newEdge;\n          }\n        }\n      }\n\n      for (const a of jsnxNodes) {\n        for (const b of jsnxNodes) {\n          if (a >= b) {\n            continue;\n          }\n\n          const newPlayerGraph = new jsnx.Graph();\n          newPlayerGraph.addNodesFrom(jsnxNodes);\n          newPlayerGraph.addEdgesFrom(jsnxPlayerEdges);\n          newPlayerGraph.addEdge(a, b);\n\n          if (\n            jsnx.graphCliqueNumber(newPlayerGraph) === targetCliqueSize &&\n            possibleEdges.some(\n              (edge: TEdge) => edge.source === a && edge.target === b,\n            )\n          ) {\n            const newEdge = {\n              source: a,\n              target: b,\n              team: 'computer' as const,\n              winningEdge: false,\n            };\n\n            return newEdge;\n          }\n        }\n      }\n\n      if (targetCliqueSize === 3) {\n        const playerDegrees = Array.from(jsnx.degree(playerGraph)).sort(\n          (a: any, b: any) => a[1] - b[1],\n        );\n\n        const computerDegrees = Array.from(jsnx.degree(computerGraph)).sort(\n          (a: any, b: any) => b[1] - a[1],\n        );\n\n        for (const computerDegree of computerDegrees) {\n          for (const playerDegree of playerDegrees) {\n            // @ts-ignore\n            const [v1, v2] = [computerDegree[0], playerDegree[0]].sort();\n\n            if (\n              possibleEdges.some(\n                (edge: TEdge) => edge.source === v1 && edge.target === v2,\n              )\n            ) {\n              return {\n                source: v1,\n                target: v2,\n                team: 'computer',\n                winningEdge: false,\n              };\n            }\n          }\n        }\n      }\n\n      return {\n        ...possibleEdges[Math.floor(Math.random() * possibleEdges.length)],\n        team: 'computer',\n        winningEdge: false,\n      };\n    };\n\n    const newEdge = await findNewEdge();\n\n    if (newEdge.winningEdge) {\n      await wait(2);\n\n      if (!getState().game.isGameRunning) {\n        return;\n      }\n\n      dispatch(nextMove(newEdge));\n      dispatch(endGame('computer'));\n\n      return;\n    } else if (newEdge.source || newEdge.target) {\n      await wait(2);\n\n      if (!getState().game.isGameRunning) {\n        return;\n      }\n\n      dispatch(nextMove(newEdge));\n    } else {\n      dispatch(endGame('draw'));\n\n      return;\n    }\n\n    const remainingEdges = getState().game.edges.filter(\n      (edge: TEdge) => edge.team === null,\n    );\n\n    if (remainingEdges.length === 0) {\n      dispatch(endGame('draw'));\n    }\n  };\n};\n","import React, { useMemo } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Graph as ReactD3Graph } from 'react-d3-graph';\n\nimport { Node } from '../Node';\nimport { TRootState, TNode, TEdge } from '../../typings/state';\nimport { playerMove } from '../../redux/actions/game';\n\nexport const Graph = () => {\n  const nodes = useSelector((state: TRootState) => state.game.nodes);\n\n  const edges = useSelector((state: TRootState) => state.game.edges);\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const whoIsMoving = useSelector(\n    (state: TRootState) => state.game.whoIsMoving,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  const onClickLink = (source: string, target: string) => {\n    const numberSource = Math.floor(Number(source));\n    const numberTarget = Math.floor(Number(target));\n\n    if (whoIsMoving === 'computer' || winner) {\n      return;\n    }\n\n    const edge = edges.find(\n      (edge: TEdge) =>\n        edge.source === numberSource && edge.target === numberTarget,\n    );\n\n    if (!edge?.team) {\n      dispatch(playerMove(numberSource, numberTarget));\n    }\n  };\n\n  const jsnxNodes = useMemo(() => {\n    return nodes.map((node: TNode) => {\n      const { length } = nodes;\n      const { id } = node;\n\n      return {\n        id: String(id + Math.random()),\n        x: 200 * Math.cos((-2 * Math.PI * id) / length + Math.PI / 2) + 250,\n        y: -200 * Math.sin((-2 * Math.PI * id) / length + Math.PI / 2) + 250,\n      };\n    });\n  }, [nodes]);\n\n  const jsnxEdges = useMemo(() => {\n    return edges.map((edge: TEdge) => {\n      return {\n        source: jsnxNodes.find(\n          ({ id }) => Math.floor(Number(id)) === edge.source,\n        )?.id,\n        target: jsnxNodes.find(\n          ({ id }) => Math.floor(Number(id)) === edge.target,\n        )?.id,\n        color:\n          edge.team === 'player'\n            ? 'green'\n            : edge.team === 'computer'\n            ? 'red'\n            : 'gray',\n      };\n    });\n  }, [jsnxNodes, edges]);\n\n  const graph = {\n    nodes: jsnxNodes,\n    links: jsnxEdges,\n  };\n\n  return (\n    <div className=\"graph\">\n      <ReactD3Graph\n        id=\"graph\"\n        data={graph}\n        config={{\n          node: {\n            viewGenerator: ({ id }: any) => (\n              <Node id={Math.floor(Number(id))} />\n            ),\n            renderLabel: false,\n          },\n          link: {\n            strokeWidth: 3,\n          },\n          staticGraph: true,\n          width: 500,\n          height: 500,\n        }}\n        onClickLink={onClickLink}\n      />\n      {!isGameRunning && <div className=\"overlay\" />}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TRootState } from '../../typings/state';\nimport { setGraphSize, setTargetCliqueSize } from '../../redux/actions/game';\nimport { startGame, endGame } from '../../redux/actions/game';\n\nexport const Form = () => {\n  const graphSize = useSelector((state: TRootState) => state.game.nodes.length);\n\n  const targetCliqueSize = useSelector(\n    (state: TRootState) => state.game.targetCliqueSize,\n  );\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const whoIsMoving = useSelector(\n    (state: TRootState) => state.game.whoIsMoving,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loading = document.getElementById('loading');\n\n    const interval = setInterval(() => {\n      if (loading) {\n        if (loading.innerHTML.length <= 2) {\n          loading.innerHTML += '.';\n        } else {\n          loading.innerHTML = '';\n        }\n      }\n    }, 500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [whoIsMoving]);\n\n  const handleGraphSizeChange = (e: any) => {\n    dispatch(setGraphSize(Number(e.target.value)));\n  };\n\n  const handleTargetCliqueSizeChange = (e: any) => {\n    dispatch(setTargetCliqueSize(Number(e.target.value)));\n  };\n\n  const handleGameStart = () => {\n    dispatch(startGame());\n  };\n\n  const handleGameEnd = () => {\n    dispatch(endGame());\n  };\n\n  return (\n    <div className=\"form\">\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar grafu:</p>\n        <p className=\"value\">{graphSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={graphSize}\n          onChange={handleGraphSizeChange}\n          disabled={isGameRunning}\n          min={4}\n          max={10}\n        />\n      </div>\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar szukanej kliki:</p>\n        <p className=\"value\">{targetCliqueSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={targetCliqueSize}\n          onChange={handleTargetCliqueSizeChange}\n          disabled={isGameRunning}\n          min={3}\n          max={graphSize}\n        />\n      </div>\n      <div className=\"buttonsContainer\">\n        <button\n          className=\"button\"\n          onClick={handleGameStart}\n          disabled={isGameRunning}\n        >\n          Rozpocznij grę\n        </button>\n        <button\n          className=\"button\"\n          onClick={handleGameEnd}\n          disabled={!isGameRunning}\n        >\n          Zakończ grę\n        </button>\n      </div>\n      {winner ? (\n        <p\n          className=\"loading\"\n          style={{\n            color:\n              winner === 'player'\n                ? 'green'\n                : winner === 'computer'\n                ? 'red'\n                : 'blue',\n          }}\n        >\n          {winner === 'player'\n            ? 'Człowiek wygrywa'\n            : winner === 'computer'\n            ? 'Komputer wygrywa'\n            : 'Remis'}\n        </p>\n      ) : isGameRunning ? (\n        <p className=\"loading\">\n          {whoIsMoving === 'computer' ? 'Komputer myśli' : 'Twoja kolej'}\n          {whoIsMoving === 'computer' && <span id=\"loading\" />}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from '../../redux/store';\nimport { Graph } from '../Graph';\nimport { Form } from '../Form';\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <h1>Gra Ramseya</h1>\n        <Form />\n        <Graph />\n      </div>\n    </Provider>\n  );\n};\n"],"sourceRoot":""}