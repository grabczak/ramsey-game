{"version":3,"sources":["serviceWorker.ts","redux/reducers/game.ts","redux/store.ts","constants/actions.ts","components/Node/index.tsx","utils/wait.ts","redux/actions/game.ts","components/Graph/index.tsx","components/Form/index.tsx","index.tsx","components/App/index.tsx"],"names":["Boolean","window","location","hostname","match","createGraph","size","nodes","edges","i","push","id","j","source","target","team","initialState","targetCliqueSize","isGameRunning","whoIsMoving","winner","rootReducer","combineReducers","game","state","action","type","payload","Math","min","map","edge","filter","item","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","Node","className","wait","seconds","Promise","resolve","setTimeout","jsnx","require","endGame","nextMove","Graph","useSelector","dispatch","useDispatch","jsnxNodes","useMemo","node","length","String","random","x","cos","PI","y","sin","jsnxEdges","find","floor","Number","color","graph","links","data","config","viewGenerator","renderLabel","link","strokeWidth","staticGraph","width","height","onClickLink","numberSource","numberTarget","getState","a","jsnxPlayerEdges","jsnxComputerEdges","possibleEdges","playerGraph","addNodesFrom","addEdgesFrom","graphCliqueNumber","findNewEdge","b","newComputerGraph","addEdge","some","winningEdge","newPlayerGraph","newEdge","playerMove","Form","graphSize","useEffect","loading","document","getElementById","interval","setInterval","innerHTML","clearInterval","value","onChange","e","disabled","max","onClick","style","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13b66349.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n  START_GAME,\n  END_GAME,\n  NEXT_MOVE,\n} from '../../constants/actions';\nimport { TGameAction } from '../../typings/actions';\nimport { TGameState } from '../../typings/state';\n\nconst createGraph = (size: number) => {\n  const nodes = [];\n  const edges = [];\n\n  for (let i = 0; i < size; i++) {\n    nodes.push({ id: i });\n  }\n\n  for (let i = 0; i < size; i++) {\n    for (let j = i + 1; j < size; j++) {\n      edges.push({\n        source: nodes[i].id,\n        target: nodes[j].id,\n        team: null,\n      });\n    }\n  }\n\n  return {\n    nodes,\n    edges,\n  };\n};\n\nconst initialState = {\n  ...createGraph(6),\n  targetCliqueSize: 3,\n  isGameRunning: false,\n  whoIsMoving: 'player' as const,\n  winner: null,\n};\n\nexport const game = (state: TGameState = initialState, action: TGameAction) => {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        ...createGraph(action.payload.size),\n        targetCliqueSize: Math.min(state.targetCliqueSize, action.payload.size),\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case SET_TARGET_CLIQUE_SIZE:\n      return {\n        ...state,\n        targetCliqueSize: action.payload.size,\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case START_GAME:\n      return {\n        ...state,\n        edges: state.edges.map((edge) => ({\n          ...edge,\n          team: null,\n        })),\n        isGameRunning: true,\n        whoIsMoving: 'player',\n        winner: null,\n      };\n    case END_GAME:\n      return {\n        ...state,\n        edges: action.payload.winner\n          ? state.edges\n          : state.edges.map((edge) => ({\n              ...edge,\n              team: null,\n            })),\n        isGameRunning: false,\n        winner: action.payload.winner,\n      };\n    case NEXT_MOVE:\n      return {\n        ...state,\n        edges: [\n          ...state.edges.filter(\n            (item) =>\n              item.source !== action.payload.edge.source ||\n              item.target !== action.payload.edge.target,\n          ),\n          action.payload.edge,\n        ],\n        whoIsMoving:\n          action.payload.edge.team === 'player' ? 'computer' : 'player',\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport { game } from './reducers/game';\n\nconst rootReducer = combineReducers({ game });\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n","export const SET_GRAPH_SIZE = 'SET_GRAPH_SIZE';\nexport const SET_TARGET_CLIQUE_SIZE = 'SET_TARGET_CLIQUE_SIZE';\nexport const START_GAME = 'START_GAME';\nexport const END_GAME = 'END_GAME';\nexport const NEXT_MOVE = 'NEXT_MOVE';\n","import React from 'react';\nimport './styles.css';\n\nexport type TNodeProps = {\n  id: number;\n};\n\nexport const Node = ({ id }: TNodeProps) => {\n  return (\n    <div className=\"node\">\n      <p>{id}</p>\n    </div>\n  );\n};\n","export const wait = (seconds: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n  START_GAME,\n  END_GAME,\n  NEXT_MOVE,\n} from '../../constants/actions';\nimport { TNode, TEdge } from '../../typings/state';\nimport { wait } from '../../utils/wait';\n\nconst jsnx = require('jsnetworkx');\n\nexport const setGraphSize = (size: number) => {\n  return {\n    type: SET_GRAPH_SIZE,\n    payload: { size },\n  };\n};\n\nexport const setTargetCliqueSize = (size: number) => {\n  return {\n    type: SET_TARGET_CLIQUE_SIZE,\n    payload: { size },\n  };\n};\n\nexport const startGame = () => {\n  return {\n    type: START_GAME,\n  };\n};\n\nexport const endGame = (\n  winner: 'player' | 'computer' | 'draw' | null = null,\n) => {\n  return {\n    type: END_GAME,\n    payload: { winner },\n  };\n};\n\nexport const nextMove = (edge: TEdge) => {\n  return {\n    type: NEXT_MOVE,\n    payload: { edge },\n  };\n};\n\nexport const playerMove = (source: number, target: number) => {\n  return async (dispatch: any, getState: any) => {\n    const { targetCliqueSize } = getState().game;\n\n    dispatch(nextMove({ source, target, team: 'player' }));\n\n    const jsnxNodes = getState().game.nodes.map((node: TNode) => node.id);\n    const jsnxPlayerEdges = getState()\n      .game.edges.filter((edge: TEdge) => edge.team === 'player')\n      .map((edge: TEdge) => [edge.source, edge.target]);\n    const jsnxComputerEdges = getState()\n      .game.edges.filter((edge: TEdge) => edge.team === 'computer')\n      .map((edge: TEdge) => [edge.source, edge.target]);\n\n    const possibleEdges = getState().game.edges.filter(\n      (edge: TEdge) => edge.team === null,\n    );\n\n    const playerGraph = new jsnx.Graph();\n    playerGraph.addNodesFrom(jsnxNodes);\n    playerGraph.addEdgesFrom(jsnxPlayerEdges);\n\n    if (jsnx.graphCliqueNumber(playerGraph) === targetCliqueSize) {\n      dispatch(endGame('player'));\n      return;\n    }\n\n    const findNewEdge = (): Promise<TEdge & { winningEdge: boolean }> => {\n      return new Promise((resolve) => {\n        for (const a of jsnxNodes) {\n          for (const b of jsnxNodes) {\n            if (a >= b) {\n              continue;\n            }\n\n            const newComputerGraph = new jsnx.Graph();\n            newComputerGraph.addNodesFrom(jsnxNodes);\n            newComputerGraph.addEdgesFrom(jsnxComputerEdges);\n            newComputerGraph.addEdge(a, b);\n\n            if (\n              jsnx.graphCliqueNumber(newComputerGraph) === targetCliqueSize &&\n              possibleEdges.some(\n                (edge: TEdge) => edge.source === a && edge.target === b,\n              )\n            ) {\n              const newEdge = {\n                source: a,\n                target: b,\n                team: 'computer' as const,\n                winningEdge: true,\n              };\n\n              resolve(newEdge);\n            }\n          }\n        }\n\n        for (const a of jsnxNodes) {\n          for (const b of jsnxNodes) {\n            if (a >= b) {\n              continue;\n            }\n\n            const newPlayerGraph = new jsnx.Graph();\n            newPlayerGraph.addNodesFrom(jsnxNodes);\n            newPlayerGraph.addEdgesFrom(jsnxPlayerEdges);\n            newPlayerGraph.addEdge(a, b);\n\n            if (\n              jsnx.graphCliqueNumber(newPlayerGraph) === targetCliqueSize &&\n              possibleEdges.some(\n                (edge: TEdge) => edge.source === a && edge.target === b,\n              )\n            ) {\n              const newEdge = {\n                source: a,\n                target: b,\n                team: 'computer' as const,\n                winningEdge: false,\n              };\n\n              resolve(newEdge);\n            }\n          }\n        }\n\n        resolve({\n          ...possibleEdges[Math.floor(Math.random() * possibleEdges.length)],\n          team: 'computer',\n          winningEdge: false,\n        });\n      });\n    };\n\n    const newEdge = await findNewEdge();\n\n    if (newEdge.winningEdge) {\n      await wait(2);\n      dispatch(nextMove(newEdge));\n      dispatch(endGame('computer'));\n      return;\n    } else if (newEdge.source || newEdge.target) {\n      await wait(2);\n      dispatch(nextMove(newEdge));\n    } else {\n      dispatch(endGame('draw'));\n      return;\n    }\n\n    const remainingEdges = getState().game.edges.filter(\n      (edge: TEdge) => edge.team === null,\n    );\n\n    if (remainingEdges.length === 0) {\n      dispatch(endGame('draw'));\n    }\n  };\n};\n","import React, { useMemo } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Graph as ReactD3Graph } from 'react-d3-graph';\n\nimport { Node } from '../Node';\nimport { TRootState, TNode, TEdge } from '../../typings/state';\nimport { playerMove } from '../../redux/actions/game';\n\nexport const Graph = () => {\n  const nodes = useSelector((state: TRootState) => state.game.nodes);\n\n  const edges = useSelector((state: TRootState) => state.game.edges);\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const whoIsMoving = useSelector(\n    (state: TRootState) => state.game.whoIsMoving,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  const onClickLink = (source: string, target: string) => {\n    const numberSource = Math.floor(Number(source));\n    const numberTarget = Math.floor(Number(target));\n\n    if (whoIsMoving === 'computer' || winner) {\n      return;\n    }\n\n    const edge = edges.find(\n      (edge: TEdge) =>\n        edge.source === numberSource && edge.target === numberTarget,\n    );\n\n    if (!edge?.team) {\n      dispatch(playerMove(numberSource, numberTarget));\n    }\n  };\n\n  const jsnxNodes = useMemo(() => {\n    return nodes.map((node: TNode) => {\n      const { length } = nodes;\n      const { id } = node;\n\n      return {\n        id: String(id + Math.random()),\n        x: 200 * Math.cos((-2 * Math.PI * id) / length + Math.PI / 2) + 250,\n        y: -200 * Math.sin((-2 * Math.PI * id) / length + Math.PI / 2) + 250,\n      };\n    });\n  }, [nodes]);\n\n  const jsnxEdges = useMemo(() => {\n    return edges.map((edge: TEdge) => {\n      return {\n        source: jsnxNodes.find(\n          ({ id }) => Math.floor(Number(id)) === edge.source,\n        )?.id,\n        target: jsnxNodes.find(\n          ({ id }) => Math.floor(Number(id)) === edge.target,\n        )?.id,\n        color:\n          edge.team === 'player'\n            ? 'green'\n            : edge.team === 'computer'\n            ? 'red'\n            : 'gray',\n      };\n    });\n  }, [jsnxNodes, edges]);\n\n  const graph = {\n    nodes: jsnxNodes,\n    links: jsnxEdges,\n  };\n\n  return (\n    <div className=\"graph\">\n      <ReactD3Graph\n        id=\"graph\"\n        data={graph}\n        config={{\n          node: {\n            viewGenerator: ({ id }: any) => (\n              <Node id={Math.floor(Number(id))} />\n            ),\n            renderLabel: false,\n          },\n          link: {\n            strokeWidth: 3,\n          },\n          staticGraph: true,\n          width: 500,\n          height: 500,\n        }}\n        onClickLink={onClickLink}\n      />\n      {!isGameRunning && <div className=\"overlay\" />}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TRootState } from '../../typings/state';\nimport { setGraphSize, setTargetCliqueSize } from '../../redux/actions/game';\nimport { startGame, endGame } from '../../redux/actions/game';\n\nexport const Form = () => {\n  const graphSize = useSelector((state: TRootState) => state.game.nodes.length);\n\n  const targetCliqueSize = useSelector(\n    (state: TRootState) => state.game.targetCliqueSize,\n  );\n\n  const isGameRunning = useSelector(\n    (state: TRootState) => state.game.isGameRunning,\n  );\n\n  const whoIsMoving = useSelector(\n    (state: TRootState) => state.game.whoIsMoving,\n  );\n\n  const winner = useSelector((state: TRootState) => state.game.winner);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loading = document.getElementById('loading');\n\n    const interval = setInterval(() => {\n      if (loading) {\n        if (loading.innerHTML.length <= 2) {\n          loading.innerHTML += '.';\n        } else {\n          loading.innerHTML = '';\n        }\n      }\n    }, 500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [whoIsMoving]);\n\n  const handleGraphSizeChange = (e: any) => {\n    dispatch(setGraphSize(Number(e.target.value)));\n  };\n\n  const handleTargetCliqueSizeChange = (e: any) => {\n    dispatch(setTargetCliqueSize(Number(e.target.value)));\n  };\n\n  const handleGameStart = () => {\n    dispatch(startGame());\n  };\n\n  const handleGameEnd = () => {\n    dispatch(endGame());\n  };\n\n  return (\n    <div className=\"form\">\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar grafu:</p>\n        <p className=\"value\">{graphSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={graphSize}\n          onChange={handleGraphSizeChange}\n          disabled={isGameRunning}\n          min={4}\n          max={10}\n        />\n      </div>\n      <div className=\"row\">\n        <p className=\"field\">Rozmiar szukanej kliki:</p>\n        <p className=\"value\">{targetCliqueSize}</p>\n        <input\n          className=\"field\"\n          type=\"range\"\n          value={targetCliqueSize}\n          onChange={handleTargetCliqueSizeChange}\n          disabled={isGameRunning}\n          min={3}\n          max={graphSize}\n        />\n      </div>\n      <div className=\"buttonsContainer\">\n        <button\n          className=\"button\"\n          onClick={handleGameStart}\n          disabled={isGameRunning}\n        >\n          Rozpocznij grę\n        </button>\n        <button\n          className=\"button\"\n          onClick={handleGameEnd}\n          disabled={!isGameRunning}\n        >\n          Zakończ grę\n        </button>\n      </div>\n      {winner ? (\n        <p\n          className=\"loading\"\n          style={{\n            color:\n              winner === 'player'\n                ? 'green'\n                : winner === 'computer'\n                ? 'red'\n                : 'blue',\n          }}\n        >\n          {winner === 'player'\n            ? 'Człowiek wygrywa'\n            : winner === 'computer'\n            ? 'Komputer wygrywa'\n            : 'Remis'}\n        </p>\n      ) : isGameRunning ? (\n        <p className=\"loading\">\n          {whoIsMoving === 'computer' ? 'Komputer myśli' : 'Twoja kolej'}\n          {whoIsMoving === 'computer' && <span id=\"loading\" />}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from '../../redux/store';\nimport { Graph } from '../Graph';\nimport { Form } from '../Form';\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <h1>Gra Ramseya</h1>\n        <Form />\n        <Graph />\n      </div>\n    </Provider>\n  );\n};\n"],"sourceRoot":""}