{"version":3,"sources":["serviceWorker.ts","redux/reducers/graph.ts","redux/reducers/options.ts","redux/store.ts","constants/actions.ts","components/Node/index.tsx","utils/wait.ts","redux/actions/graph.ts","components/Graph/index.tsx","redux/actions/options.ts","index.tsx","components/App/index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","createGraph","size","nodes","links","i","push","id","String","Math","random","x","cos","PI","y","sin","a","b","Number","source","target","color","graphSize","targetCliqueSize","rootReducer","combineReducers","graph","state","action","type","payload","filter","item","affiliation","options","min","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","Node","className","floor","wait","seconds","Promise","resolve","setTimeout","jsnx","require","addEdge","Graph","useSelector","dispatch","useDispatch","config","node","renderLabel","viewGenerator","link","highlightColor","strokeWidth","staticGraph","width","height","value","onChange","e","max","data","onClickLink","getState","playerGraph","addNodesFrom","map","addEdgesFrom","graphCliqueNumber","alert","possibleEdges","newEdge","length","computerGraph","nextMove","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ede1a4be.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_EDGE, SET_GRAPH_SIZE } from '../../constants/actions';\nimport { TGraphAction } from '../../typings/actions';\n\nconst initialState = {\n  ...createGraph(6),\n};\n\nexport function graph(state = initialState, action: TGraphAction) {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        ...createGraph(action.payload.size),\n      };\n    case ADD_EDGE:\n      return {\n        ...state,\n        links: [\n          ...state.links.filter(\n            (item) =>\n              item.source !== action.payload.source ||\n              item.target !== action.payload.target,\n          ),\n          {\n            source: action.payload.source,\n            target: action.payload.target,\n            color: action.payload.affiliation === 'player' ? 'green' : 'red',\n          },\n        ],\n      };\n    default:\n      return state;\n  }\n}\n\nfunction createGraph(size: number) {\n  const r = 200;\n\n  const nodes = [];\n  const links = [];\n\n  for (let i = 0; i < size; i++) {\n    nodes.push({\n      id: String(i + 1 + Math.random()),\n      x: r * Math.cos((-2 * Math.PI * i) / size + Math.PI / 2) + 250,\n      y: -r * Math.sin((-2 * Math.PI * i) / size + Math.PI / 2) + 250,\n    });\n  }\n\n  for (const a of nodes) {\n    for (const b of nodes) {\n      if (Number(a.id) < Number(b.id)) {\n        links.push({\n          source: a.id,\n          target: b.id,\n          color: '#CCCCCC',\n        });\n      }\n    }\n  }\n\n  return {\n    nodes,\n    links,\n  };\n}\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n} from '../../constants/actions';\nimport { TOptionsAction } from '../../typings/actions';\n\nconst initialState = {\n  graphSize: 6,\n  targetCliqueSize: 3,\n};\n\nexport function options(state = initialState, action: TOptionsAction) {\n  switch (action.type) {\n    case SET_GRAPH_SIZE:\n      return {\n        ...state,\n        graphSize: action.payload.size,\n        targetCliqueSize: Math.min(state.targetCliqueSize, action.payload.size),\n      };\n    case SET_TARGET_CLIQUE_SIZE:\n      return {\n        ...state,\n        targetCliqueSize: action.payload.size,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport { graph } from './reducers/graph';\nimport { options } from './reducers/options';\n\nconst rootReducer = combineReducers({ graph, options });\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nexport type TRootState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\n","export const ADD_EDGE = 'ADD_EDGE';\nexport const CREATE_GRAPH = 'CREATE_GRAPH';\nexport const NEXT_MOVE = 'NEXT_MOVE';\n\nexport const SET_GRAPH_SIZE = 'SET_GRAPH_SIZE';\nexport const SET_TARGET_CLIQUE_SIZE = 'SET_TARGET_CLIQUE_SIZE';\n","import React from 'react';\nimport './styles.css';\n\nexport type TNodeProps = {\n  id: string;\n};\n\nexport function Node({ id }: TNodeProps) {\n  return (\n    <div className=\"Node\">\n      <p>{Math.floor(Number(id))}</p>\n    </div>\n  );\n}\n","export const wait = (seconds: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, seconds * 1000);\n  });\n};\n","import { ADD_EDGE, CREATE_GRAPH } from '../../constants/actions';\nimport { wait } from '../../utils/wait';\nimport { TRootState, TNode, TLink } from '../../typings/state';\n\nconst jsnx = require('jsnetworkx');\n\nexport const createGraph = (size: number) => {\n  return {\n    type: CREATE_GRAPH,\n    payload: { size },\n  };\n};\n\nexport const addEdge = (\n  source: string,\n  target: string,\n  affiliation: 'player' | 'computer',\n) => {\n  return {\n    type: ADD_EDGE,\n    payload: { source, target, affiliation },\n  };\n};\n\nexport const nextMove = (source: string, target: string) => {\n  return async (dispatch: any, getState: () => TRootState) => {\n    dispatch(addEdge(source, target, 'player'));\n\n    const playerGraph = new jsnx.Graph();\n\n    playerGraph.addNodesFrom(\n      getState().graph.nodes.map((node: TNode) => Math.floor(Number(node.id))),\n    );\n\n    playerGraph.addEdgesFrom(\n      getState()\n        .graph.links.filter((link: TLink) => link.color === 'green')\n        .map((link: TLink) => [\n          Math.floor(Number(link.source)),\n          Math.floor(Number(link.target)),\n        ]),\n    );\n\n    if (\n      jsnx.graphCliqueNumber(playerGraph) ===\n      getState().options.targetCliqueSize\n    ) {\n      await wait(0.1);\n      alert('Człowiek wygrywa');\n      return;\n    }\n\n    const possibleEdges = getState().graph.links.filter(\n      (link: TLink) => link.color === '#CCCCCC',\n    );\n\n    const newEdge =\n      possibleEdges[Math.floor(Math.random() * possibleEdges.length)];\n\n    await wait(1);\n\n    if (newEdge) {\n      dispatch(addEdge(newEdge.source, newEdge.target, 'computer'));\n    }\n\n    const computerGraph = new jsnx.Graph();\n\n    computerGraph.addNodesFrom(\n      getState().graph.nodes.map((node: TNode) => Math.floor(Number(node.id))),\n    );\n\n    computerGraph.addEdgesFrom(\n      getState()\n        .graph.links.filter((link: TLink) => link.color === 'red')\n        .map((link: TLink) => [\n          Math.floor(Number(link.source)),\n          Math.floor(Number(link.target)),\n        ]),\n    );\n\n    if (\n      jsnx.graphCliqueNumber(computerGraph) ===\n      getState().options.targetCliqueSize\n    ) {\n      await wait(0.1);\n      alert('Komputer wygrywa');\n      return;\n    }\n  };\n};\n","import React from 'react';\nimport './styles.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Graph as ReactD3Graph } from 'react-d3-graph';\n\nimport { Node } from '../Node';\nimport { TRootState } from '../../typings/state';\nimport { nextMove } from '../../redux/actions/graph';\n\nimport { setGraphSize, setTargetCliqueSize } from '../../redux/actions/options';\n\nexport function Graph() {\n  const { graphSize, targetCliqueSize } = useSelector(\n    (state: TRootState) => state.options,\n  );\n\n  const { graph } = useSelector((state: TRootState) => state);\n\n  const dispatch = useDispatch();\n\n  const config = {\n    node: {\n      renderLabel: false,\n      viewGenerator: (node: any) => <Node id={node.id} />,\n    },\n    link: {\n      highlightColor: 'green',\n      strokeWidth: 2,\n    },\n    // linkHighlightBehavior: true,\n    staticGraph: true,\n    width: 500,\n    height: 500,\n  };\n\n  const onClickLink = (source: string, target: string) => {\n    dispatch(nextMove(source, target));\n  };\n\n  return (\n    <div className=\"Graph\">\n      <p>{graphSize}</p>\n      <input\n        type=\"range\"\n        value={graphSize}\n        onChange={(e) => dispatch(setGraphSize(Number(e.target.value)))}\n        min={4}\n        max={10}\n      />\n      <p>{targetCliqueSize}</p>\n      <input\n        type=\"range\"\n        value={targetCliqueSize}\n        onChange={(e) => dispatch(setTargetCliqueSize(Number(e.target.value)))}\n        min={3}\n        max={graphSize}\n      />\n      <ReactD3Graph\n        id=\"graph\"\n        data={graph}\n        config={config}\n        onClickLink={onClickLink}\n      />\n    </div>\n  );\n}\n","import {\n  SET_GRAPH_SIZE,\n  SET_TARGET_CLIQUE_SIZE,\n} from '../../constants/actions';\n\nexport const setGraphSize = (size: number) => {\n  return {\n    type: SET_GRAPH_SIZE,\n    payload: { size },\n  };\n};\n\nexport const setTargetCliqueSize = (size: number) => {\n  return {\n    type: SET_TARGET_CLIQUE_SIZE,\n    payload: { size },\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './styles.css';\nimport { Provider } from 'react-redux';\n\nimport { store } from '../../redux/store';\nimport { Graph } from '../Graph';\n\nexport function App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <h1>Gra Ramseya</h1>\n        <Graph />\n      </div>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}